name: symplified-mutable-ci

on:
  # only trigger by hand
  workflow_dispatch:
    inputs:
      stage:
        description: 'all / build / test / coverage / docs'
        required: true
        default: all
        type: choice
        options: [all, build, test, coverage, docs]

permissions:
  contents: read
  
jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
    
      - name: Install clang-18
        run: wget -qO- https://apt.llvm.org/llvm.sh | sudo bash -s -- 18
    
      - name: Add clang-18 to PATH
        run: echo "/usr/lib/llvm-18/bin" >> $GITHUB_PATH
    
      - name: APT deps
        run: sudo apt-get update && sudo apt-get install -y ninja-build libboost-dev libtbb-dev libfmt-dev
    
      - name: Generate gitversion.tbl
        run: |
          REV=$(git rev-parse --short HEAD)
          BRANCH=$(git rev-parse --abbrev-ref HEAD)
          TAG=$(git describe --tags --always --dirty)
          cat > include/mutable/gitversion.tbl <<EOF
          #pragma once
          namespace m::version {
          constexpr const char GIT_REV[]     = "${REV}";
          constexpr const char GIT_BRANCH[]  = "${BRANCH}";
          constexpr const char SEM_VERSION[] = "${TAG}";
          struct version_info { const char* GIT_REV; const char* GIT_BRANCH; const char* SEM_VERSION; };
          inline const version_info& get(){ static const version_info v{GIT_REV, GIT_BRANCH, SEM_VERSION}; return v; }
          }
          EOF

      - name: Configure & Build
        env:
          CC:  clang
          CXX: clang++
        run: |
          cmake -S . -B build -G Ninja \
                -DCMAKE_BUILD_TYPE=RelWithDebInfo \
                -DWITH_V8=OFF \
                -DBUILD_THIRD_PARTY_BOOST=OFF \
                -DENABLE_SANITIZERS=OFF
          cmake --build build -j$(nproc)
  
      - uses: actions/upload-artifact@v4
        with:
          name: mutable-build
          path: build

  # ---------------------------------------
  test:
    if: github.actor == github.repository_owner && (inputs.stage == 'all' || inputs.stage == 'test')
    needs: build
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    steps:
      - uses: actions/download-artifact@v4
        with: { name: mutable-build, path: build }
      - name: Run unit tests
        run: ctest --test-dir build --output-on-failure

  # ---------------------------------------
  coverage:
    if: github.actor == github.repository_owner && (inputs.stage == 'all' || inputs.stage == 'coverage')
    needs: build
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/download-artifact@v4
        with: { name: mutable-build, path: build }
      - name: Run tests w/ coverage
        run: |
          cmake --build build --target coverage
          lcov --remove build/coverage.info '/usr/*' -o coverage.info
      - name: Upload LCOV report
        uses: codecov/codecov-action@v4
        with:
          files: coverage.info
